{"mappings":"AECe,MAAA,EACb,OAAO,OAAS,CACd,KAAM,OACN,QAAS,UACT,IAAK,MACL,KAAM,MACR,CAAE,AAEF,QAAO,OAAS,CACd,KAAM,EACN,QAAS,CACX,CAAE,AAEF,aAAY,CAAY,CAAE,CACxB,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,EAAK,MAAM,CAAC,IAAI,AAChC,CAEA,aAAc,CACZ,SAAS,aAAa,CAAC,eAAe,SAAS,CAAG,GAElD,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,MAAM,CAAC,IAAI,CAAE,IACpC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,MAAM,CAAC,OAAO,CAAE,IAAK,CAC5C,IAAM,EAAO,SAAS,aAAa,CAAC,MAEpC,CAAA,EAAK,EAAE,CAAG,CAAA,EAAG,EAAE,CAAC,EAAE,EAAA,CAAG,CAErB,IAAM,EAAM,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAE5B,IAAI,CAAC,UAAU,CAAC,EAAM,GACtB,SAAS,aAAa,CAAC,eAAe,MAAM,CAAC,EAC/C,CAEJ,CAEA,eAAgB,CACd,IAAM,EAAa,EAAE,CAErB,IAAK,IAAI,EAAM,EAAG,EAAM,EAAK,MAAM,CAAC,IAAI,CAAE,IACxC,IAAK,IAAI,EAAM,EAAG,EAAM,EAAK,MAAM,CAAC,OAAO,CAAE,IACd,IAAzB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,EACtB,EAAW,IAAI,CAAC,CAAE,IAAA,EAAK,IAAA,CAAI,GAKjC,GAAI,EAAW,MAAM,CAAG,EAAG,CACzB,IAAM,EACJ,CAAU,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAAE,AAE3D,CAAA,IAAI,CAAC,KAAK,CAAC,EAAW,GAAG,CAAC,CAAC,EAAW,GAAG,CAAC,CAAG,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,CACzE,CACF,CAEA,WAAW,CAAG,CAAE,CACd,OAAO,EAAI,MAAM,CAAC,AAAC,GAAQ,AAAQ,IAAR,EAC7B,CAEA,MAAM,CAAG,CAAE,CACT,IAAI,EAAS,IAAI,CAAC,UAAU,CAAC,GAE7B,IAAK,IAAI,EAAI,EAAG,EAAI,EAAO,MAAM,CAAG,EAAG,IACjC,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,GAC7B,CAAM,CAAC,EAAE,EAAI,EACb,CAAM,CAAC,EAAI,EAAE,CAAG,EAChB,IAAI,CAAC,KAAK,EAAI,CAAM,CAAC,EAAE,EAM3B,IAFA,EAAS,IAAI,CAAC,UAAU,CAAC,GAElB,EAAO,MAAM,CAAG,EAAK,MAAM,CAAC,IAAI,EACrC,EAAO,IAAI,CAAC,GAGd,OAAO,CACT,CAEA,WAAW,CAAI,CAAE,CAAG,CAAE,CACpB,EAAK,SAAS,CAAG,GACjB,EAAK,SAAS,CAAC,KAAK,CAAG,GACvB,EAAK,SAAS,CAAC,GAAG,CAAC,cAEf,EAAM,IACR,EAAK,SAAS,CAAG,EACjB,EAAK,SAAS,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,EAAA,CAAK,EAE3C,CAEA,UAAW,CACT,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,MAAM,CAAC,IAAI,CAAE,IAAK,CACzC,IAAI,EAAM,IAAI,CAAC,KAAK,CAAC,EAAE,CAEvB,EAAM,IAAI,CAAC,KAAK,CAAC,GACjB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAG,EAEhB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,MAAM,CAAC,OAAO,CAAE,IAAK,CAC5C,IAAM,EAAO,SAAS,cAAc,CAAC,EAAE,QAAQ,GAAK,IAAM,EAAE,QAAQ,IAC9D,EAAM,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAE5B,IAAI,CAAC,UAAU,CAAC,EAAM,EACxB,CACF,CACF,CAEA,WAAY,CACV,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,MAAM,CAAC,IAAI,CAAE,IAAK,CACzC,IAAI,EAAM,IAAI,CAAC,KAAK,CAAC,EAAE,CAEvB,EAAI,OAAO,GAEX,AADA,CAAA,EAAM,IAAI,CAAC,KAAK,CAAC,EAAjB,EACI,OAAO,GACX,IAAI,CAAC,KAAK,CAAC,EAAE,CAAG,EAEhB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,MAAM,CAAC,OAAO,CAAE,IAAK,CAC5C,IAAM,EAAO,SAAS,cAAc,CAAC,EAAE,QAAQ,GAAK,IAAM,EAAE,QAAQ,IAC9D,EAAM,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAE5B,IAAI,CAAC,UAAU,CAAC,EAAM,EACxB,CACF,CACF,CACA,QAAS,CACP,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,MAAM,CAAC,OAAO,CAAE,IAAK,CAC5C,IAAI,EAAM,CACR,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAChB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAChB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAChB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CACjB,CAED,EAAM,IAAI,CAAC,KAAK,CAAC,GAEjB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,MAAM,CAAC,IAAI,CAAE,IAAK,CACzC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAG,CAAG,CAAC,EAAE,CAEzB,IAAM,EAAO,SAAS,cAAc,CAAC,EAAE,QAAQ,GAAK,IAAM,EAAE,QAAQ,IAC9D,EAAM,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAE5B,IAAI,CAAC,UAAU,CAAC,EAAM,EACxB,CACF,CACF,CACA,UAAW,CACT,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,MAAM,CAAC,OAAO,CAAE,IAAK,CAC5C,IAAI,EAAM,CACR,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAChB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAChB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAChB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CACjB,CAED,EAAI,OAAO,GAEX,AADA,CAAA,EAAM,IAAI,CAAC,KAAK,CAAC,EAAjB,EACI,OAAO,GAEX,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,MAAM,CAAC,IAAI,CAAE,IAAK,CACzC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAG,CAAG,CAAC,EAAE,CAEzB,IAAM,EAAO,SAAS,cAAc,CAAC,EAAE,QAAQ,GAAK,IAAM,EAAE,QAAQ,IAC9D,EAAM,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAE5B,IAAI,CAAC,UAAU,CAAC,EAAM,EACxB,CACF,CACF,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,WAAY,CACV,OAAO,IAAI,CAAC,MAAM,AACpB,CAEA,OAAQ,CACN,IAAI,CAAC,MAAM,CAAG,EAAK,MAAM,CAAC,OAAO,CACjC,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,aAAa,EACpB,CAEA,SAAU,CACR,IAAI,CAAC,MAAM,CAAG,EAAK,MAAM,CAAC,OAAO,CACjC,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,GAAQ,EAAI,GAAG,CAAC,IAAM,IACnD,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,KAAK,EACZ,CAEA,kBAAmB,CACjB,IAAM,EAAO,EAAK,MAAM,CAAC,IAAI,CACvB,EAAU,EAAK,MAAM,CAAC,OAAO,CAEnC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,IACxB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAS,IAAK,CAChC,IAAM,EAAU,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAEhC,GAAI,AAAY,IAAZ,EACF,MAAO,CAAA,EAGT,IAAM,EAAQ,EAAI,EAAI,EAAU,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAI,EAAE,CAAG,KACjD,EAAO,EAAI,EAAI,EAAO,IAAI,CAAC,KAAK,CAAC,EAAI,EAAE,CAAC,EAAE,CAAG,KAC7C,EAAO,EAAI,GAAK,EAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAI,EAAE,CAAG,KAC3C,EAAK,EAAI,GAAK,EAAI,IAAI,CAAC,KAAK,CAAC,EAAI,EAAE,CAAC,EAAE,CAAG,KAE/C,GACE,IAAY,GACZ,IAAY,GACZ,IAAY,GACZ,IAAY,EAEZ,MAAO,CAAA,CAEX,CAGF,MAAO,CAAA,CACT,CAEA,WAAW,CAAS,CAAE,CACpB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,MAAM,CAAC,IAAI,CAAE,IACpC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,MAAM,CAAC,OAAO,CAAE,IACvC,GAAI,CAAS,CAAC,EAAE,CAAC,EAAE,GAAK,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CACtC,MAAO,CAAA,EAKb,MAAO,CAAA,CACT,CAEA,cAAe,CACb,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,AAAC,GAAQ,EAAI,QAAQ,CAAC,GAC/C,CAEA,eAAgB,CACV,AAAC,IAAI,CAAC,YAAY,IAAO,IAAI,CAAC,gBAAgB,GAEvC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,AAAC,GAAQ,EAAI,QAAQ,CAAC,QAC/C,CAAA,IAAI,CAAC,MAAM,CAAG,EAAK,MAAM,CAAC,GAAG,AAAH,EAF1B,IAAI,CAAC,MAAM,CAAG,EAAK,MAAM,CAAC,IAAI,AAIlC,CACF,CD3OA,MAAM,EAAO,IAAI,EATI,CACnB,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,EAMD,EAAK,WAAW,GAEhB,MAAM,EAAkB,SAAS,aAAa,CAAC,UACzC,EAAe,SAAS,aAAa,CAAC,eAE5C,SAAS,EAAY,CAAa,EAC5B,IAAkB,AAAA,EAAK,MAAM,CAAC,OAAO,EACvC,SAAS,aAAa,CAAC,kBAAkB,SAAS,CAAC,GAAG,CAAC,UACvD,SAAS,aAAa,CAAC,iBAAiB,SAAS,CAAC,GAAG,CAAC,WAC7C,IAAkB,AAAA,EAAK,MAAM,CAAC,IAAI,CAC3C,SAAS,aAAa,CAAC,iBAAiB,SAAS,CAAC,MAAM,CAAC,UAChD,IAAkB,AAAA,EAAK,MAAM,CAAC,GAAG,EAC1C,SAAS,aAAa,CAAC,gBAAgB,SAAS,CAAC,MAAM,CAAC,SAE5D,CAEA,EAAgB,gBAAgB,CAAC,QAAS,KACpC,EAAK,SAAS,KAAO,AAAA,EAAK,MAAM,CAAC,IAAI,EACvC,EAAgB,SAAS,CAAC,KAAK,CAAG,GAClC,EAAgB,SAAS,CAAC,GAAG,CAAC,SAAU,WACxC,EAAgB,SAAS,CAAG,UAC5B,EAAK,KAAK,GACV,EAAK,WAAW,CAAC,EAAK,KAAK,GAE3B,CAAA,EAAK,MAAM,GAAK,AAAA,EAAK,MAAM,CAAC,OAAO,EACnC,EAAK,MAAM,GAAK,AAAA,EAAK,MAAM,CAAC,IAAI,AAAJ,IAE5B,EAAK,OAAO,GACZ,EAAa,SAAS,CAhCL,EAiCjB,EAAY,EAAK,MAAM,EACvB,EAAK,WAAW,CAAC,EAAK,KAAK,EAE/B,GAEA,SAAS,gBAAgB,CAAC,UAAW,AAAC,IACpC,GAAI,EAAK,MAAM,GAAK,AAAA,EAAK,MAAM,CAAC,OAAO,CAAE,CACvC,IAAM,EAAY,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,EAAK,KAAK,GAEtD,OAAQ,EAAE,GAAG,EACX,IAAK,YACH,EAAK,QAAQ,GACb,KACF,KAAK,aACH,EAAK,SAAS,GACd,KACF,KAAK,UACH,EAAK,MAAM,GACX,KACF,KAAK,YACH,EAAK,QAAQ,GACb,KACF,SACE,MACJ,CAEI,EAAK,UAAU,CAAC,KAClB,EAAK,aAAa,GAClB,EAAK,aAAa,GAClB,EAAK,aAAa,GAClB,EAAY,EAAK,MAAM,EACvB,EAAK,WAAW,CAAC,EAAK,KAAK,EAC3B,EAAa,SAAS,CAAG,EAAK,KAAK,CAEvC,CACF","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["'use strict';\nclass $a5fd07fa01589658$export$2e2bcd8739ae039 {\n    static Status = {\n        IDLE: 'idle',\n        PLAYING: 'playing',\n        WIN: 'win',\n        LOSE: 'lose'\n    };\n    static Config = {\n        ROWS: 4,\n        COLUMNS: 4\n    };\n    constructor(initialState){\n        this.state = initialState;\n        this.score = 0;\n        this.status = $a5fd07fa01589658$export$2e2bcd8739ae039.Status.IDLE;\n    }\n    renderBoard() {\n        document.querySelector('.game-field').innerHTML = '';\n        for(let r = 0; r < $a5fd07fa01589658$export$2e2bcd8739ae039.Config.ROWS; r++)for(let c = 0; c < $a5fd07fa01589658$export$2e2bcd8739ae039.Config.COLUMNS; c++){\n            const tile = document.createElement('div');\n            tile.id = `${r}-${c}`;\n            const num = this.state[r][c];\n            this.updateTile(tile, num);\n            document.querySelector('.game-field').append(tile);\n        }\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        for(let row = 0; row < $a5fd07fa01589658$export$2e2bcd8739ae039.Config.ROWS; row++){\n            for(let col = 0; col < $a5fd07fa01589658$export$2e2bcd8739ae039.Config.COLUMNS; col++)if (this.state[row][col] === 0) emptyCells.push({\n                row: row,\n                col: col\n            });\n        }\n        if (emptyCells.length > 0) {\n            const randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.state[randomCell.row][randomCell.col] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    filterZero(row) {\n        return row.filter((num)=>num !== 0);\n    }\n    slide(row) {\n        let newRow = this.filterZero(row);\n        for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n            newRow[i] *= 2;\n            newRow[i + 1] = 0;\n            this.score += newRow[i];\n        }\n        newRow = this.filterZero(newRow);\n        while(newRow.length < $a5fd07fa01589658$export$2e2bcd8739ae039.Config.ROWS)newRow.push(0);\n        return newRow;\n    }\n    updateTile(tile, num) {\n        tile.innerText = '';\n        tile.classList.value = '';\n        tile.classList.add('field-cell');\n        if (num > 0) {\n            tile.innerText = num;\n            tile.classList.add(`field-cell--${num}`);\n        }\n    }\n    moveLeft() {\n        for(let r = 0; r < $a5fd07fa01589658$export$2e2bcd8739ae039.Config.ROWS; r++){\n            let row = this.state[r];\n            row = this.slide(row);\n            this.state[r] = row;\n            for(let c = 0; c < $a5fd07fa01589658$export$2e2bcd8739ae039.Config.COLUMNS; c++){\n                const tile = document.getElementById(r.toString() + '-' + c.toString());\n                const num = this.state[r][c];\n                this.updateTile(tile, num);\n            }\n        }\n    }\n    moveRight() {\n        for(let r = 0; r < $a5fd07fa01589658$export$2e2bcd8739ae039.Config.ROWS; r++){\n            let row = this.state[r];\n            row.reverse();\n            row = this.slide(row);\n            row.reverse();\n            this.state[r] = row;\n            for(let c = 0; c < $a5fd07fa01589658$export$2e2bcd8739ae039.Config.COLUMNS; c++){\n                const tile = document.getElementById(r.toString() + '-' + c.toString());\n                const num = this.state[r][c];\n                this.updateTile(tile, num);\n            }\n        }\n    }\n    moveUp() {\n        for(let c = 0; c < $a5fd07fa01589658$export$2e2bcd8739ae039.Config.COLUMNS; c++){\n            let row = [\n                this.state[0][c],\n                this.state[1][c],\n                this.state[2][c],\n                this.state[3][c]\n            ];\n            row = this.slide(row);\n            for(let r = 0; r < $a5fd07fa01589658$export$2e2bcd8739ae039.Config.ROWS; r++){\n                this.state[r][c] = row[r];\n                const tile = document.getElementById(r.toString() + '-' + c.toString());\n                const num = this.state[r][c];\n                this.updateTile(tile, num);\n            }\n        }\n    }\n    moveDown() {\n        for(let c = 0; c < $a5fd07fa01589658$export$2e2bcd8739ae039.Config.COLUMNS; c++){\n            let row = [\n                this.state[0][c],\n                this.state[1][c],\n                this.state[2][c],\n                this.state[3][c]\n            ];\n            row.reverse();\n            row = this.slide(row);\n            row.reverse();\n            for(let r = 0; r < $a5fd07fa01589658$export$2e2bcd8739ae039.Config.ROWS; r++){\n                this.state[r][c] = row[r];\n                const tile = document.getElementById(r.toString() + '-' + c.toString());\n                const num = this.state[r][c];\n                this.updateTile(tile, num);\n            }\n        }\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = $a5fd07fa01589658$export$2e2bcd8739ae039.Status.PLAYING;\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    restart() {\n        this.status = $a5fd07fa01589658$export$2e2bcd8739ae039.Status.PLAYING;\n        this.state = this.state.map((row)=>row.map(()=>0));\n        this.score = 0;\n        this.start();\n    }\n    hasPossibleMoves() {\n        const rows = $a5fd07fa01589658$export$2e2bcd8739ae039.Config.ROWS;\n        const columns = $a5fd07fa01589658$export$2e2bcd8739ae039.Config.COLUMNS;\n        for(let r = 0; r < rows; r++)for(let c = 0; c < columns; c++){\n            const current = this.state[r][c];\n            if (current === 0) return true;\n            const right = c + 1 < columns ? this.state[r][c + 1] : null;\n            const down = r + 1 < rows ? this.state[r + 1][c] : null;\n            const left = c - 1 >= 0 ? this.state[r][c - 1] : null;\n            const up = r - 1 >= 0 ? this.state[r - 1][c] : null;\n            if (current === right || current === down || current === left || current === up) return true;\n        }\n        return false;\n    }\n    isMoveMade(prevBoard) {\n        for(let r = 0; r < $a5fd07fa01589658$export$2e2bcd8739ae039.Config.ROWS; r++)for(let c = 0; c < $a5fd07fa01589658$export$2e2bcd8739ae039.Config.COLUMNS; c++){\n            if (prevBoard[r][c] !== this.state[r][c]) return true;\n        }\n        return false;\n    }\n    hasEmptyTile() {\n        return this.state.some((row)=>row.includes(0));\n    }\n    checkGameOver() {\n        if (!this.hasEmptyTile() && !this.hasPossibleMoves()) this.status = $a5fd07fa01589658$export$2e2bcd8739ae039.Status.LOSE;\n        else if (this.state.some((row)=>row.includes(2048))) this.status = $a5fd07fa01589658$export$2e2bcd8739ae039.Status.WIN;\n    }\n}\n\n\n'use strict';\nconst $09e991522ca7e64e$var$initialState = [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n];\nconst $09e991522ca7e64e$var$initialScore = 0;\nconst $09e991522ca7e64e$var$game = new (0, $a5fd07fa01589658$export$2e2bcd8739ae039)($09e991522ca7e64e$var$initialState);\n$09e991522ca7e64e$var$game.renderBoard();\nconst $09e991522ca7e64e$var$buttonStartGame = document.querySelector('.start');\nconst $09e991522ca7e64e$var$scoreElement = document.querySelector('.game-score');\nfunction $09e991522ca7e64e$var$showMessage(currentStatus) {\n    if (currentStatus === (0, $a5fd07fa01589658$export$2e2bcd8739ae039).Status.PLAYING) {\n        document.querySelector('.message-start').classList.add('hidden');\n        document.querySelector('.message-lose').classList.add('hidden');\n    } else if (currentStatus === (0, $a5fd07fa01589658$export$2e2bcd8739ae039).Status.LOSE) document.querySelector('.message-lose').classList.remove('hidden');\n    else if (currentStatus === (0, $a5fd07fa01589658$export$2e2bcd8739ae039).Status.WIN) document.querySelector('.message-win').classList.remove('hidden');\n}\n$09e991522ca7e64e$var$buttonStartGame.addEventListener('click', ()=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === (0, $a5fd07fa01589658$export$2e2bcd8739ae039).Status.IDLE) {\n        $09e991522ca7e64e$var$buttonStartGame.classList.value = '';\n        $09e991522ca7e64e$var$buttonStartGame.classList.add('button', 'restart');\n        $09e991522ca7e64e$var$buttonStartGame.innerText = 'Restart';\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$game.renderBoard($09e991522ca7e64e$var$game.state);\n    } else if ($09e991522ca7e64e$var$game.status === (0, $a5fd07fa01589658$export$2e2bcd8739ae039).Status.PLAYING || $09e991522ca7e64e$var$game.status === (0, $a5fd07fa01589658$export$2e2bcd8739ae039).Status.LOSE) {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$scoreElement.innerText = $09e991522ca7e64e$var$initialScore;\n        $09e991522ca7e64e$var$showMessage($09e991522ca7e64e$var$game.status);\n        $09e991522ca7e64e$var$game.renderBoard($09e991522ca7e64e$var$game.state);\n    }\n});\ndocument.addEventListener('keydown', (e)=>{\n    if ($09e991522ca7e64e$var$game.status === (0, $a5fd07fa01589658$export$2e2bcd8739ae039).Status.PLAYING) {\n        const prevBoard = JSON.parse(JSON.stringify($09e991522ca7e64e$var$game.state));\n        switch(e.key){\n            case 'ArrowLeft':\n                $09e991522ca7e64e$var$game.moveLeft();\n                break;\n            case 'ArrowRight':\n                $09e991522ca7e64e$var$game.moveRight();\n                break;\n            case 'ArrowUp':\n                $09e991522ca7e64e$var$game.moveUp();\n                break;\n            case 'ArrowDown':\n                $09e991522ca7e64e$var$game.moveDown();\n                break;\n            default:\n                return;\n        }\n        if ($09e991522ca7e64e$var$game.isMoveMade(prevBoard)) {\n            $09e991522ca7e64e$var$game.checkGameOver();\n            $09e991522ca7e64e$var$game.addRandomTile();\n            $09e991522ca7e64e$var$game.checkGameOver();\n            $09e991522ca7e64e$var$showMessage($09e991522ca7e64e$var$game.status);\n            $09e991522ca7e64e$var$game.renderBoard($09e991522ca7e64e$var$game.state);\n            $09e991522ca7e64e$var$scoreElement.innerText = $09e991522ca7e64e$var$game.score;\n        }\n    }\n});\n\n\n//# sourceMappingURL=index.7ca85bd6.js.map\n","'use strict';\n\nimport Game from '../modules/Game.class.js';\n\nconst initialState = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nconst initialScore = 0;\n\nconst game = new Game(initialState);\n\ngame.renderBoard();\n\nconst buttonStartGame = document.querySelector('.start');\nconst scoreElement = document.querySelector('.game-score');\n\nfunction showMessage(currentStatus) {\n  if (currentStatus === Game.Status.PLAYING) {\n    document.querySelector('.message-start').classList.add('hidden');\n    document.querySelector('.message-lose').classList.add('hidden');\n  } else if (currentStatus === Game.Status.LOSE) {\n    document.querySelector('.message-lose').classList.remove('hidden');\n  } else if (currentStatus === Game.Status.WIN) {\n    document.querySelector('.message-win').classList.remove('hidden');\n  }\n}\n\nbuttonStartGame.addEventListener('click', () => {\n  if (game.getStatus() === Game.Status.IDLE) {\n    buttonStartGame.classList.value = '';\n    buttonStartGame.classList.add('button', 'restart');\n    buttonStartGame.innerText = 'Restart';\n    game.start();\n    game.renderBoard(game.state);\n  } else if (\n    game.status === Game.Status.PLAYING ||\n    game.status === Game.Status.LOSE\n  ) {\n    game.restart();\n    scoreElement.innerText = initialScore;\n    showMessage(game.status);\n    game.renderBoard(game.state);\n  }\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.status === Game.Status.PLAYING) {\n    const prevBoard = JSON.parse(JSON.stringify(game.state));\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n      default:\n        return;\n    }\n\n    if (game.isMoveMade(prevBoard)) {\n      game.checkGameOver();\n      game.addRandomTile();\n      game.checkGameOver();\n      showMessage(game.status);\n      game.renderBoard(game.state);\n      scoreElement.innerText = game.score;\n    }\n  }\n});\n","'use strict';\nexport default class Game {\n  static Status = {\n    IDLE: 'idle',\n    PLAYING: 'playing',\n    WIN: 'win',\n    LOSE: 'lose',\n  };\n\n  static Config = {\n    ROWS: 4,\n    COLUMNS: 4,\n  };\n\n  constructor(initialState) {\n    this.state = initialState;\n    this.score = 0;\n    this.status = Game.Status.IDLE;\n  }\n\n  renderBoard() {\n    document.querySelector('.game-field').innerHTML = '';\n\n    for (let r = 0; r < Game.Config.ROWS; r++) {\n      for (let c = 0; c < Game.Config.COLUMNS; c++) {\n        const tile = document.createElement('div');\n\n        tile.id = `${r}-${c}`;\n\n        const num = this.state[r][c];\n\n        this.updateTile(tile, num);\n        document.querySelector('.game-field').append(tile);\n      }\n    }\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < Game.Config.ROWS; row++) {\n      for (let col = 0; col < Game.Config.COLUMNS; col++) {\n        if (this.state[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomCell =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.state[randomCell.row][randomCell.col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  filterZero(row) {\n    return row.filter((num) => num !== 0);\n  }\n\n  slide(row) {\n    let newRow = this.filterZero(row);\n\n    for (let i = 0; i < newRow.length - 1; i++) {\n      if (newRow[i] === newRow[i + 1]) {\n        newRow[i] *= 2;\n        newRow[i + 1] = 0;\n        this.score += newRow[i];\n      }\n    }\n\n    newRow = this.filterZero(newRow);\n\n    while (newRow.length < Game.Config.ROWS) {\n      newRow.push(0);\n    }\n\n    return newRow;\n  }\n\n  updateTile(tile, num) {\n    tile.innerText = '';\n    tile.classList.value = '';\n    tile.classList.add('field-cell');\n\n    if (num > 0) {\n      tile.innerText = num;\n      tile.classList.add(`field-cell--${num}`);\n    }\n  }\n\n  moveLeft() {\n    for (let r = 0; r < Game.Config.ROWS; r++) {\n      let row = this.state[r];\n\n      row = this.slide(row);\n      this.state[r] = row;\n\n      for (let c = 0; c < Game.Config.COLUMNS; c++) {\n        const tile = document.getElementById(r.toString() + '-' + c.toString());\n        const num = this.state[r][c];\n\n        this.updateTile(tile, num);\n      }\n    }\n  }\n\n  moveRight() {\n    for (let r = 0; r < Game.Config.ROWS; r++) {\n      let row = this.state[r];\n\n      row.reverse();\n      row = this.slide(row);\n      row.reverse();\n      this.state[r] = row;\n\n      for (let c = 0; c < Game.Config.COLUMNS; c++) {\n        const tile = document.getElementById(r.toString() + '-' + c.toString());\n        const num = this.state[r][c];\n\n        this.updateTile(tile, num);\n      }\n    }\n  }\n  moveUp() {\n    for (let c = 0; c < Game.Config.COLUMNS; c++) {\n      let row = [\n        this.state[0][c],\n        this.state[1][c],\n        this.state[2][c],\n        this.state[3][c],\n      ];\n\n      row = this.slide(row);\n\n      for (let r = 0; r < Game.Config.ROWS; r++) {\n        this.state[r][c] = row[r];\n\n        const tile = document.getElementById(r.toString() + '-' + c.toString());\n        const num = this.state[r][c];\n\n        this.updateTile(tile, num);\n      }\n    }\n  }\n  moveDown() {\n    for (let c = 0; c < Game.Config.COLUMNS; c++) {\n      let row = [\n        this.state[0][c],\n        this.state[1][c],\n        this.state[2][c],\n        this.state[3][c],\n      ];\n\n      row.reverse();\n      row = this.slide(row);\n      row.reverse();\n\n      for (let r = 0; r < Game.Config.ROWS; r++) {\n        this.state[r][c] = row[r];\n\n        const tile = document.getElementById(r.toString() + '-' + c.toString());\n        const num = this.state[r][c];\n\n        this.updateTile(tile, num);\n      }\n    }\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = Game.Status.PLAYING;\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  restart() {\n    this.status = Game.Status.PLAYING;\n    this.state = this.state.map((row) => row.map(() => 0));\n    this.score = 0;\n    this.start();\n  }\n\n  hasPossibleMoves() {\n    const rows = Game.Config.ROWS;\n    const columns = Game.Config.COLUMNS;\n\n    for (let r = 0; r < rows; r++) {\n      for (let c = 0; c < columns; c++) {\n        const current = this.state[r][c];\n\n        if (current === 0) {\n          return true;\n        }\n\n        const right = c + 1 < columns ? this.state[r][c + 1] : null;\n        const down = r + 1 < rows ? this.state[r + 1][c] : null;\n        const left = c - 1 >= 0 ? this.state[r][c - 1] : null;\n        const up = r - 1 >= 0 ? this.state[r - 1][c] : null;\n\n        if (\n          current === right ||\n          current === down ||\n          current === left ||\n          current === up\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isMoveMade(prevBoard) {\n    for (let r = 0; r < Game.Config.ROWS; r++) {\n      for (let c = 0; c < Game.Config.COLUMNS; c++) {\n        if (prevBoard[r][c] !== this.state[r][c]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  hasEmptyTile() {\n    return this.state.some((row) => row.includes(0));\n  }\n\n  checkGameOver() {\n    if (!this.hasEmptyTile() && !this.hasPossibleMoves()) {\n      this.status = Game.Status.LOSE;\n    } else if (this.state.some((row) => row.includes(2048))) {\n      this.status = Game.Status.WIN;\n    }\n  }\n}\n"],"names":["$a5fd07fa01589658$export$2e2bcd8739ae039","Status","IDLE","PLAYING","WIN","LOSE","Config","ROWS","COLUMNS","constructor","initialState","state","score","status","renderBoard","document","querySelector","innerHTML","r","c","tile","createElement","id","num","updateTile","append","addRandomTile","emptyCells","row","col","push","length","randomCell","Math","floor","random","filterZero","filter","slide","newRow","i","innerText","classList","value","add","moveLeft","getElementById","toString","moveRight","reverse","moveUp","moveDown","getScore","getState","getStatus","start","restart","map","hasPossibleMoves","rows","columns","current","right","down","left","up","isMoveMade","prevBoard","hasEmptyTile","some","includes","checkGameOver","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$buttonStartGame","$09e991522ca7e64e$var$scoreElement","$09e991522ca7e64e$var$showMessage","currentStatus","remove","addEventListener","e","JSON","parse","stringify","key"],"version":3,"file":"index.7ca85bd6.js.map"}