{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_define_property.js"],"sourcesContent":["(function () {\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $cd5a47cf8ef6d766$export$71511d61b312f219(obj, key, value) {\n    if (key in obj) Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n    });\n    else obj[key] = value;\n    return obj;\n}\n\n\n'use strict';\nvar $3d28d7f1aac198f5$export$2e2bcd8739ae039 = /*#__PURE__*/ function() {\n    function Game(initialState) {\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.state = initialState;\n        this.score = 0;\n        this.status = Game.Status.IDLE;\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"renderBoard\",\n            value: function renderBoard() {\n                document.querySelector('.game-field').innerHTML = '';\n                for(var r = 0; r < Game.Config.ROWS; r++)for(var c = 0; c < Game.Config.COLUMNS; c++){\n                    var tile = document.createElement('div');\n                    tile.id = \"\".concat(r, \"-\").concat(c);\n                    var num = this.state[r][c];\n                    this.updateTile(tile, num);\n                    document.querySelector('.game-field').append(tile);\n                }\n            }\n        },\n        {\n            key: \"addRandomTile\",\n            value: function addRandomTile() {\n                var emptyCells = [];\n                for(var row = 0; row < Game.Config.ROWS; row++){\n                    for(var col = 0; col < Game.Config.COLUMNS; col++)if (this.state[row][col] === 0) emptyCells.push({\n                        row: row,\n                        col: col\n                    });\n                }\n                if (emptyCells.length > 0) {\n                    var randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n                    this.state[randomCell.row][randomCell.col] = Math.random() < 0.9 ? 2 : 4;\n                }\n            }\n        },\n        {\n            key: \"filterZero\",\n            value: function filterZero(row) {\n                return row.filter(function(num) {\n                    return num !== 0;\n                });\n            }\n        },\n        {\n            key: \"slide\",\n            value: function slide(row) {\n                var newRow = this.filterZero(row);\n                for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                    newRow[i] *= 2;\n                    newRow[i + 1] = 0;\n                    this.score += newRow[i];\n                }\n                newRow = this.filterZero(newRow);\n                while(newRow.length < Game.Config.ROWS)newRow.push(0);\n                return newRow;\n            }\n        },\n        {\n            key: \"updateTile\",\n            value: function updateTile(tile, num) {\n                tile.innerText = '';\n                tile.classList.value = '';\n                tile.classList.add('field-cell');\n                if (num > 0) {\n                    tile.innerText = num;\n                    tile.classList.add(\"field-cell--\".concat(num));\n                }\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                for(var r = 0; r < Game.Config.ROWS; r++){\n                    var row = this.state[r];\n                    row = this.slide(row);\n                    this.state[r] = row;\n                    for(var c = 0; c < Game.Config.COLUMNS; c++){\n                        var tile = document.getElementById(r.toString() + '-' + c.toString());\n                        var num = this.state[r][c];\n                        this.updateTile(tile, num);\n                    }\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                for(var r = 0; r < Game.Config.ROWS; r++){\n                    var row = this.state[r];\n                    row.reverse();\n                    row = this.slide(row);\n                    row.reverse();\n                    this.state[r] = row;\n                    for(var c = 0; c < Game.Config.COLUMNS; c++){\n                        var tile = document.getElementById(r.toString() + '-' + c.toString());\n                        var num = this.state[r][c];\n                        this.updateTile(tile, num);\n                    }\n                }\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                for(var c = 0; c < Game.Config.COLUMNS; c++){\n                    var row = [\n                        this.state[0][c],\n                        this.state[1][c],\n                        this.state[2][c],\n                        this.state[3][c]\n                    ];\n                    row = this.slide(row);\n                    for(var r = 0; r < Game.Config.ROWS; r++){\n                        this.state[r][c] = row[r];\n                        var tile = document.getElementById(r.toString() + '-' + c.toString());\n                        var num = this.state[r][c];\n                        this.updateTile(tile, num);\n                    }\n                }\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                for(var c = 0; c < Game.Config.COLUMNS; c++){\n                    var row = [\n                        this.state[0][c],\n                        this.state[1][c],\n                        this.state[2][c],\n                        this.state[3][c]\n                    ];\n                    row.reverse();\n                    row = this.slide(row);\n                    row.reverse();\n                    for(var r = 0; r < Game.Config.ROWS; r++){\n                        this.state[r][c] = row[r];\n                        var tile = document.getElementById(r.toString() + '-' + c.toString());\n                        var num = this.state[r][c];\n                        this.updateTile(tile, num);\n                    }\n                }\n            }\n        },\n        {\n            key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            key: \"getState\",\n            value: function getState() {\n                return this.state;\n            }\n        },\n        {\n            key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            key: \"start\",\n            value: function start() {\n                this.status = Game.Status.PLAYING;\n                this.addRandomTile();\n                this.addRandomTile();\n            }\n        },\n        {\n            key: \"restart\",\n            value: function restart() {\n                this.status = Game.Status.PLAYING;\n                this.state = this.state.map(function(row) {\n                    return row.map(function() {\n                        return 0;\n                    });\n                });\n                this.score = 0;\n                this.start();\n            }\n        },\n        {\n            key: \"hasPossibleMoves\",\n            value: function hasPossibleMoves() {\n                var rows = Game.Config.ROWS;\n                var columns = Game.Config.COLUMNS;\n                for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n                    var current = this.state[r][c];\n                    if (current === 0) return true;\n                    var right = c + 1 < columns ? this.state[r][c + 1] : null;\n                    var down = r + 1 < rows ? this.state[r + 1][c] : null;\n                    var left = c - 1 >= 0 ? this.state[r][c - 1] : null;\n                    var up = r - 1 >= 0 ? this.state[r - 1][c] : null;\n                    if (current === right || current === down || current === left || current === up) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"isMoveMade\",\n            value: function isMoveMade(prevBoard) {\n                for(var r = 0; r < Game.Config.ROWS; r++)for(var c = 0; c < Game.Config.COLUMNS; c++){\n                    if (prevBoard[r][c] !== this.state[r][c]) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"hasEmptyTile\",\n            value: function hasEmptyTile() {\n                return this.state.some(function(row) {\n                    return row.includes(0);\n                });\n            }\n        },\n        {\n            key: \"checkGameOver\",\n            value: function checkGameOver() {\n                if (!this.hasEmptyTile() && !this.hasPossibleMoves()) this.status = Game.Status.LOSE;\n                else if (this.state.some(function(row) {\n                    return row.includes(2048);\n                })) this.status = Game.Status.WIN;\n            }\n        }\n    ]);\n    return Game;\n}();\n(0, $cd5a47cf8ef6d766$export$71511d61b312f219)($3d28d7f1aac198f5$export$2e2bcd8739ae039, \"Status\", {\n    IDLE: 'idle',\n    PLAYING: 'playing',\n    WIN: 'win',\n    LOSE: 'lose'\n});\n(0, $cd5a47cf8ef6d766$export$71511d61b312f219)($3d28d7f1aac198f5$export$2e2bcd8739ae039, \"Config\", {\n    ROWS: 4,\n    COLUMNS: 4\n});\n\n\n'use strict';\nvar $197cd56b15c33885$var$initialState = [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n];\nvar $197cd56b15c33885$var$initialScore = 0;\nvar $197cd56b15c33885$var$game = new (0, $3d28d7f1aac198f5$export$2e2bcd8739ae039)($197cd56b15c33885$var$initialState);\n$197cd56b15c33885$var$game.renderBoard();\nvar $197cd56b15c33885$var$buttonStartGame = document.querySelector('.start');\nvar $197cd56b15c33885$var$scoreElement = document.querySelector('.game-score');\nfunction $197cd56b15c33885$var$showMessage(currentStatus) {\n    if (currentStatus === (0, $3d28d7f1aac198f5$export$2e2bcd8739ae039).Status.PLAYING) {\n        document.querySelector('.message-start').classList.add('hidden');\n        document.querySelector('.message-lose').classList.add('hidden');\n    } else if (currentStatus === (0, $3d28d7f1aac198f5$export$2e2bcd8739ae039).Status.LOSE) document.querySelector('.message-lose').classList.remove('hidden');\n    else if (currentStatus === (0, $3d28d7f1aac198f5$export$2e2bcd8739ae039).Status.WIN) document.querySelector('.message-win').classList.remove('hidden');\n}\n$197cd56b15c33885$var$buttonStartGame.addEventListener('click', function() {\n    if ($197cd56b15c33885$var$game.getStatus() === (0, $3d28d7f1aac198f5$export$2e2bcd8739ae039).Status.IDLE) {\n        $197cd56b15c33885$var$buttonStartGame.classList.value = '';\n        $197cd56b15c33885$var$buttonStartGame.classList.add('button', 'restart');\n        $197cd56b15c33885$var$buttonStartGame.innerText = 'Restart';\n        $197cd56b15c33885$var$game.start();\n        $197cd56b15c33885$var$game.renderBoard($197cd56b15c33885$var$game.state);\n    } else if ($197cd56b15c33885$var$game.status === (0, $3d28d7f1aac198f5$export$2e2bcd8739ae039).Status.PLAYING || $197cd56b15c33885$var$game.status === (0, $3d28d7f1aac198f5$export$2e2bcd8739ae039).Status.LOSE) {\n        $197cd56b15c33885$var$game.restart();\n        $197cd56b15c33885$var$scoreElement.innerText = $197cd56b15c33885$var$initialScore;\n        $197cd56b15c33885$var$showMessage($197cd56b15c33885$var$game.status);\n        $197cd56b15c33885$var$game.renderBoard($197cd56b15c33885$var$game.state);\n    }\n});\ndocument.addEventListener('keydown', function(e) {\n    if ($197cd56b15c33885$var$game.status === (0, $3d28d7f1aac198f5$export$2e2bcd8739ae039).Status.PLAYING) {\n        var prevBoard = JSON.parse(JSON.stringify($197cd56b15c33885$var$game.state));\n        switch(e.key){\n            case 'ArrowLeft':\n                $197cd56b15c33885$var$game.moveLeft();\n                break;\n            case 'ArrowRight':\n                $197cd56b15c33885$var$game.moveRight();\n                break;\n            case 'ArrowUp':\n                $197cd56b15c33885$var$game.moveUp();\n                break;\n            case 'ArrowDown':\n                $197cd56b15c33885$var$game.moveDown();\n                break;\n            default:\n                return;\n        }\n        if ($197cd56b15c33885$var$game.isMoveMade(prevBoard)) {\n            $197cd56b15c33885$var$game.checkGameOver();\n            $197cd56b15c33885$var$game.addRandomTile();\n            $197cd56b15c33885$var$game.checkGameOver();\n            $197cd56b15c33885$var$showMessage($197cd56b15c33885$var$game.status);\n            $197cd56b15c33885$var$game.renderBoard($197cd56b15c33885$var$game.state);\n            $197cd56b15c33885$var$scoreElement.innerText = $197cd56b15c33885$var$game.score;\n        }\n    }\n});\n\n})();\n//# sourceMappingURL=index.f4b1e9ca.js.map\n","'use strict';\n\nimport Game from '../modules/Game.class.js';\n\nconst initialState = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nconst initialScore = 0;\n\nconst game = new Game(initialState);\n\ngame.renderBoard();\n\nconst buttonStartGame = document.querySelector('.start');\nconst scoreElement = document.querySelector('.game-score');\n\nfunction showMessage(currentStatus) {\n  if (currentStatus === Game.Status.PLAYING) {\n    document.querySelector('.message-start').classList.add('hidden');\n    document.querySelector('.message-lose').classList.add('hidden');\n  } else if (currentStatus === Game.Status.LOSE) {\n    document.querySelector('.message-lose').classList.remove('hidden');\n  } else if (currentStatus === Game.Status.WIN) {\n    document.querySelector('.message-win').classList.remove('hidden');\n  }\n}\n\nbuttonStartGame.addEventListener('click', () => {\n  if (game.getStatus() === Game.Status.IDLE) {\n    buttonStartGame.classList.value = '';\n    buttonStartGame.classList.add('button', 'restart');\n    buttonStartGame.innerText = 'Restart';\n    game.start();\n    game.renderBoard(game.state);\n  } else if (\n    game.status === Game.Status.PLAYING ||\n    game.status === Game.Status.LOSE\n  ) {\n    game.restart();\n    scoreElement.innerText = initialScore;\n    showMessage(game.status);\n    game.renderBoard(game.state);\n  }\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.status === Game.Status.PLAYING) {\n    const prevBoard = JSON.parse(JSON.stringify(game.state));\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n      default:\n        return;\n    }\n\n    if (game.isMoveMade(prevBoard)) {\n      game.checkGameOver();\n      game.addRandomTile();\n      game.checkGameOver();\n      showMessage(game.status);\n      game.renderBoard(game.state);\n      scoreElement.innerText = game.score;\n    }\n  }\n});\n","'use strict';\nexport default class Game {\n  static Status = {\n    IDLE: 'idle',\n    PLAYING: 'playing',\n    WIN: 'win',\n    LOSE: 'lose',\n  };\n\n  static Config = {\n    ROWS: 4,\n    COLUMNS: 4,\n  };\n\n  constructor(initialState) {\n    this.state = initialState;\n    this.score = 0;\n    this.status = Game.Status.IDLE;\n  }\n\n  renderBoard() {\n    document.querySelector('.game-field').innerHTML = '';\n\n    for (let r = 0; r < Game.Config.ROWS; r++) {\n      for (let c = 0; c < Game.Config.COLUMNS; c++) {\n        const tile = document.createElement('div');\n\n        tile.id = `${r}-${c}`;\n\n        const num = this.state[r][c];\n\n        this.updateTile(tile, num);\n        document.querySelector('.game-field').append(tile);\n      }\n    }\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < Game.Config.ROWS; row++) {\n      for (let col = 0; col < Game.Config.COLUMNS; col++) {\n        if (this.state[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomCell =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.state[randomCell.row][randomCell.col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  filterZero(row) {\n    return row.filter((num) => num !== 0);\n  }\n\n  slide(row) {\n    let newRow = this.filterZero(row);\n\n    for (let i = 0; i < newRow.length - 1; i++) {\n      if (newRow[i] === newRow[i + 1]) {\n        newRow[i] *= 2;\n        newRow[i + 1] = 0;\n        this.score += newRow[i];\n      }\n    }\n\n    newRow = this.filterZero(newRow);\n\n    while (newRow.length < Game.Config.ROWS) {\n      newRow.push(0);\n    }\n\n    return newRow;\n  }\n\n  updateTile(tile, num) {\n    tile.innerText = '';\n    tile.classList.value = '';\n    tile.classList.add('field-cell');\n\n    if (num > 0) {\n      tile.innerText = num;\n      tile.classList.add(`field-cell--${num}`);\n    }\n  }\n\n  moveLeft() {\n    for (let r = 0; r < Game.Config.ROWS; r++) {\n      let row = this.state[r];\n\n      row = this.slide(row);\n      this.state[r] = row;\n\n      for (let c = 0; c < Game.Config.COLUMNS; c++) {\n        const tile = document.getElementById(r.toString() + '-' + c.toString());\n        const num = this.state[r][c];\n\n        this.updateTile(tile, num);\n      }\n    }\n  }\n\n  moveRight() {\n    for (let r = 0; r < Game.Config.ROWS; r++) {\n      let row = this.state[r];\n\n      row.reverse();\n      row = this.slide(row);\n      row.reverse();\n      this.state[r] = row;\n\n      for (let c = 0; c < Game.Config.COLUMNS; c++) {\n        const tile = document.getElementById(r.toString() + '-' + c.toString());\n        const num = this.state[r][c];\n\n        this.updateTile(tile, num);\n      }\n    }\n  }\n  moveUp() {\n    for (let c = 0; c < Game.Config.COLUMNS; c++) {\n      let row = [\n        this.state[0][c],\n        this.state[1][c],\n        this.state[2][c],\n        this.state[3][c],\n      ];\n\n      row = this.slide(row);\n\n      for (let r = 0; r < Game.Config.ROWS; r++) {\n        this.state[r][c] = row[r];\n\n        const tile = document.getElementById(r.toString() + '-' + c.toString());\n        const num = this.state[r][c];\n\n        this.updateTile(tile, num);\n      }\n    }\n  }\n  moveDown() {\n    for (let c = 0; c < Game.Config.COLUMNS; c++) {\n      let row = [\n        this.state[0][c],\n        this.state[1][c],\n        this.state[2][c],\n        this.state[3][c],\n      ];\n\n      row.reverse();\n      row = this.slide(row);\n      row.reverse();\n\n      for (let r = 0; r < Game.Config.ROWS; r++) {\n        this.state[r][c] = row[r];\n\n        const tile = document.getElementById(r.toString() + '-' + c.toString());\n        const num = this.state[r][c];\n\n        this.updateTile(tile, num);\n      }\n    }\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = Game.Status.PLAYING;\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  restart() {\n    this.status = Game.Status.PLAYING;\n    this.state = this.state.map((row) => row.map(() => 0));\n    this.score = 0;\n    this.start();\n  }\n\n  hasPossibleMoves() {\n    const rows = Game.Config.ROWS;\n    const columns = Game.Config.COLUMNS;\n\n    for (let r = 0; r < rows; r++) {\n      for (let c = 0; c < columns; c++) {\n        const current = this.state[r][c];\n\n        if (current === 0) {\n          return true;\n        }\n\n        const right = c + 1 < columns ? this.state[r][c + 1] : null;\n        const down = r + 1 < rows ? this.state[r + 1][c] : null;\n        const left = c - 1 >= 0 ? this.state[r][c - 1] : null;\n        const up = r - 1 >= 0 ? this.state[r - 1][c] : null;\n\n        if (\n          current === right ||\n          current === down ||\n          current === left ||\n          current === up\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isMoveMade(prevBoard) {\n    for (let r = 0; r < Game.Config.ROWS; r++) {\n      for (let c = 0; c < Game.Config.COLUMNS; c++) {\n        if (prevBoard[r][c] !== this.state[r][c]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  hasEmptyTile() {\n    return this.state.some((row) => row.includes(0));\n  }\n\n  checkGameOver() {\n    if (!this.hasEmptyTile() && !this.hasPossibleMoves()) {\n      this.status = Game.Status.LOSE;\n    } else if (this.state.some((row) => row.includes(2048))) {\n      this.status = Game.Status.WIN;\n    }\n  }\n}\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n    } else obj[key] = value;\n\n    return obj;\n}\nexport { _define_property as _ };\n"],"names":["$cd5a47cf8ef6d766$export$71511d61b312f219","obj","key","value","Object","defineProperty","enumerable","configurable","writable","$3d28d7f1aac198f5$export$2e2bcd8739ae039","protoProps","Game","initialState","instance","Constructor","TypeError","state","score","status","Status","IDLE","document","querySelector","innerHTML","r","Config","ROWS","c","COLUMNS","tile","createElement","id","concat","num","updateTile","append","emptyCells","row","col","push","length","randomCell","Math","floor","random","filter","newRow","filterZero","i","innerText","classList","add","slide","getElementById","toString","reverse","PLAYING","addRandomTile","map","start","rows","columns","current","right","down","left","up","prevBoard","some","includes","hasEmptyTile","hasPossibleMoves","WIN","LOSE","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","prototype","$197cd56b15c33885$var$game","renderBoard","$197cd56b15c33885$var$buttonStartGame","$197cd56b15c33885$var$scoreElement","$197cd56b15c33885$var$showMessage","currentStatus","remove","addEventListener","getStatus","restart","e","JSON","parse","stringify","moveLeft","moveRight","moveUp","moveDown","isMoveMade","checkGameOver"],"version":3,"file":"index.f4b1e9ca.js.map"}